wls1_fun_l <- function(x)
wls1$coefficients[2]*x + wls1$coefficients[1] -
qnorm(0.5 + level/2)*
sqrt(exp(2*t*x)*sigma^2 + exp(2*t_wls1*x)*(sigma_wls1)^2*
(1/n + (x-mean(data_fit$x))^2/((n-1)*var(data_fit$x))))
#The part under square root represents the variance of y given any x
#We could use this information to calculate how much standard deviation
#there is between y and the regression line
wls1_fun_u <- function(x)
wls1$coefficients[2]*x + wls1$coefficients[1] +
qnorm(0.5 + level/2)*
sqrt(exp(2*t*x)*sigma^2 + exp(2*t_wls1*x)*(sigma_wls1)^2*
(1/n + (x-mean(data_fit$x))^2/((n-1)*var(data_fit$x))))
#wls2 is a quadratic model
wls2 <- gls(y ~ I(x^2) + x, data = data_fit, weights = varExp(form = ~x),
method = "ML")
wls2_fit <- predict(wls2)
t_wls2 <- as.numeric(wls2$modelStruct)
sigma_wls2 <- wls2$sigma
var_wls2 <- exp(2*t_wls2*data_fit$x)*(sigma_wls2)^2 #model variance structure
#var_str is the variance of the prediction, a sum of the uncertainty in
#the regression line and in the new hypothetical replica prediction
var_str <- var_adapted + var_wls2*
(1/n + (data_fit$x-mean(data_fit$x))^2/((n-1)*var(data_fit$x)))
wls2_l <- wls2_fit - qnorm(0.5 + level/2)*sqrt(var_str)
wls2_u <- wls2_fit + qnorm(0.5 + level/2)*sqrt(var_str)
#the function form of wls2 and its prediction band
wls2_fun <- function(x)
wls2$coefficients[2]*x^2 + wls2$coefficients[3]*x +
wls2$coefficients[1]
wls2_fun_l <- function(x)
wls2$coefficients[2]*x^2 + wls2$coefficients[3]*x +
wls2$coefficients[1] -
qnorm(0.5 + level/2)*
sqrt(exp(2*t*x)*sigma^2 + exp(2*t_wls2*x)*(sigma_wls2)^2*
(1/n + (x-mean(data_fit$x))^2/((n-1)*var(data_fit$x))))
wls2_fun_u <- function(x)
wls2$coefficients[2]*x^2 + wls2$coefficients[3]*x +
wls2$coefficients[1] +
qnorm(0.5 + level/2)*
sqrt(exp(2*t*x)*sigma^2 + exp(2*t_wls2*x)*(sigma_wls2)^2*
(1/n + (x-mean(data_fit$x))^2/((n-1)*var(data_fit$x))))
#Use anova test to determine which model is better
res_anova <- anova(wls1, wls2)
pref <- numeric(n) #a vector for recording the preference
pref_score <- numeric(n)
#preference score is defined as the number of standard deviations from the regression line
sd <- numeric(n) #for storing standard deviations
if(res_anova$'p-value'[2] < 0.05){ #use polynomial model
for(i in 1:n){
sd[i] <- sqrt(exp(2*t*data_fit$x[i])*sigma^2 + exp(2*t_wls2*data_fit$x[i])*(sigma_wls2)^2*
(1/n + (data_fit$x[i]-mean(data_fit$x))^2/((n-1)*var(data_fit$x))))
pref_score[i] <- (wls2_fun(data_fit$x[i]) - data_fit$y[i])/sd[i]
}
}else{ #use linear model
for(i in 1:n){
sd[i] <- sqrt(exp(2*t*data_fit$x[i])*sigma^2 + exp(2*t_wls1*data_fit$x[i])*(sigma_wls1)^2*
(1/n + (data_fit$x[i]-mean(data_fit$x))^2/((n-1)*var(data_fit$x))))
pref_score[i] <- (wls1_fun(data_fit$x[i]) - data_fit$y[i])/sd[i]
}
}
#Plot the two weighted regression models with prediction bands
if(plot == T){
plot(data_fit, col = rgb(0,0,0,0.3), xlab = xlab, ylab = ylab,cex=.3)
lines(sort(data_fit$x), wls1_fit[order(data_fit$x)], lwd = 2, col = 2)
lines(sort(data_fit$x), wls1_l[order(data_fit$x)], lty = 2, col = 2)
lines(sort(data_fit$x), wls1_u[order(data_fit$x)], lty = 2, col = 2)
lines(sort(data_fit$x), wls2_fit[order(data_fit$x)], lwd = 2, col = 3)
lines(sort(data_fit$x), wls2_l[order(data_fit$x)], lty = 2, col = 3)
lines(sort(data_fit$x), wls2_u[order(data_fit$x)], lty = 2, col = 3)
if(res_anova$`p-value`[2] < 0.05){
curve(wls2_fun, col = 4, add = T)
curve(wls2_fun_l, col = 4, lty = 2, add = T)
curve(wls2_fun_u, col = 4, lty = 2, add = T)
} else{
curve(wls1_fun, col = 4, add = T)
curve(wls1_fun_l, col = 4, lty = 2, add = T)
curve(wls1_fun_u, col = 4, lty = 2, add = T)
}
}
return(pref_score) #returns pref as a vector
}
getwd()
setwd("Box Sync/Home Folder ns121/Sync/Research/TF_general/wls/PBMdata/")
data_runx = read.table("Combined_Runx1_10nM_50nM_Runx2_10nM_50nM_Bound_filtered_normalized.txt",col.names = c("Name","Seq","Runx1_10nM","Runx1_50nM","Runx2_10nM","Runx2_50nM"))
data_runx[1,]
data_fit = data_runx
lab.tf1_x = "Runx1_10nM"
lab.tf1_y = "Runx1_50nM"
lab_tf2_y = "Runx2_10nM"
res_varRep <- varRep(data_fit[,lab.tf1_x], data_fit[,lab.tf1_y], plot = T,
xlab = lab.tf1_x, ylab = lab.tf1_y)
res_pref <- classTF(data_fit[,lab.tf1_x], data_fit[,lab.tf2_y], plot = T,
xlab = lab.tf1_x, ylab = lab.tf2_y,
t = res_varRep$t, sigma = res_varRep$sigma)
lab.tf2_y = "Runx2_10nM"
res_pref <- classTF(data_fit[,lab.tf1_x], data_fit[,lab.tf2_y], plot = T,
xlab = lab.tf1_x, ylab = lab.tf2_y,
t = res_varRep$t, sigma = res_varRep$sigma)
data_output <- data_fit[,c(lab.tf1_x, lab.tf2_y)]
data_output$seq <- data_fit$seq
data_output$pref <- res_pref
head(data_output)
plot(data_runx$Runx1_10nM,data_runx$Runx2_10nM,cex=.3)
plot(data_runx$Runx1_50nM,data_runx$Runx2_50nM,cex=.3)
setwd("../For_website/PBMdata/")
data_ets = read.table("Combined_Ets1_100nM_Elk1_100nM_50nM_Gabpa_100nM_Bound_filtered_normalized.txt",col.names=c("seq","ets1_100nM","elk1_100nM","elk1_50nM","gabpa_100nM"))
data_fit = data_ets
lab.tf1_x <- "elk1_100nM"  ## Used in Replicate estimate (VarRep) and TF pair estimate (ClassTF)
lab.tf1_y <- "elk1_50nM"   ## Used in Replicate estimate
lab.tf2_y <- "ets1_100nM"  ## Used in TF pair estimate
res_varRep <- varRep(data_fit[,lab.tf1_x], data_fit[,lab.tf1_y], plot = T,
xlab = lab.tf1_x, ylab = lab.tf1_y)
res_pref <- classTF(data_fit[,lab.tf1_x], data_fit[,lab.tf2_y], plot = T,
xlab = lab.tf1_x, ylab = lab.tf2_y,
t = res_varRep$t, sigma = res_varRep$sigma)
data_output <- data_fit[,c(lab.tf1_x, lab.tf2_y)]
data_output$seq <- data_fit$seq
data_output$pref <- res_pref
write.table(data_output, file = paste0("Preference_calls_",lab.tf1_x,"_vs_",lab.tf2_y,"_0.99CI.txt"), row.names = F)
library(RColorBrewer)
library(classInt)
plotvar1 = data_output[which(data_output$pref > 0), 4] ## TF1 preferred sites
plotclr1 = rev(brewer.pal(9,"Reds"))
class1 = classIntervals(plotvar1,9,syle="quantile")
colcode=findColours(class,plotclr)
colcode1=findColours(class1,plotclr1)
plotvar2 = data_output[which(data_output$pref < 0), 4] ## TF2 preferred sites
plotclr2 = brewer.pal(9,"Blues")
class2 = classIntervals(plotvar2,9,syle="quantile")
colcode2 = findColours(class2,plotclr2)
plot(x1[,lab.tf1_x],x1[,lab.tf2_y],cex=.3,pch=16,col=colcode,xlim=c(0,1),ylim=c(0,1))
plot(data_output[,lab.tf1_x],data_output[,lab.tf2_y],cex=.3,pch=16,col=colcode,xlim=c(0,1),ylim=c(0,1))
plot(data_output[,lab.tf1_x],data_output[,lab.tf2_y],cex=.3,pch=16,col=colcode1,xlim=c(0,1),ylim=c(0,1))
points(m[which(m$pref==0),lab.tf1_x],m[which(m$pref==0),lab.tf2_y],cex=.3,pch=16,col="khaki")
points(data_output[which(data_output$pref==0),lab.tf1_x],data_output[which(data_output$pref==0),lab.tf2_y],cex=.3,pch=16,col="khaki")
pref_tf1 = data_output[which(data_output$pref > 0), ] ## TF1 preferred sites
pref_tf2 = data_output[which(data_output$pref < 0), ] ## TF2 preferred sites
plotvar1 = pref_tf1$pref
plotclr1 = rev(brewer.pal(9,"Reds"))
class1 = classIntervals(plotvar1,9,syle="quantile")
colcode1=findColours(class1,plotclr1)
plotvar2 = pref_tf2$pref
plotclr2 = brewer.pal(9,"Blues")
class2 = classIntervals(plotvar2,9,syle="quantile")
colcode2 = findColours(class2,plotclr2)
plot(pref_tf1[,lab.tf1_x],pref_tf1[,lab.tf2_y],cex=.3,pch=16,col=colcode1,xlim=c(0,1),ylim=c(0,1))
plotclr1 = brewer.pal(9,"Reds")
plotclr2 = rev(brewer.pal(9,"Blues"))
class1 = classIntervals(plotvar1,9,syle="quantile")
class2 = classIntervals(plotvar2,9,syle="quantile")
colcode2 = findColours(class2,plotclr2)
colcode1=findColours(class1,plotclr1)
plot(pref_tf1[,lab.tf1_x],pref_tf1[,lab.tf2_y],cex=.3,pch=16,col=colcode1,xlim=c(0,1),ylim=c(0,1))
points(data_output[which(data_output$pref==0),lab.tf1_x],data_output[which(data_output$pref==0),lab.tf2_y],cex=.3,pch=16,col="khaki")
View(data_output)
classTF <- function(tf1_x, tf2_y, t, sigma, plot = F,
xlab = "tf1_x", ylab = "tf1_y", level = 0.99){
data_fit <- data.frame(x = tf1_x, y = tf2_y)
n <- nrow(data_fit)
var_adapted <- exp(2*t*data_fit$x)*sigma^2 #adapted variance structure
#wls1 is a linear model
wls1 <- gls(y ~ x, data = data_fit, weights = varExp(),
method = "ML")
wls1_fit <- predict(wls1)
t_wls1 <- as.numeric(wls1$modelStruct)
sigma_wls1 <- wls1$sigma
var_wls1 <- exp(2*t_wls1*data_fit$x)*(sigma_wls1)^2 #model variance structure
#var_str is the variance of the prediction, a sum of the uncertainty in
#the regression line and in the new hypothetical replica prediction
var_str <- var_adapted + var_wls1*
(1/n + (data_fit$x-mean(data_fit$x))^2/((n-1)*var(data_fit$x)))
wls1_l <- wls1_fit - qnorm(0.5 + level/2)*sqrt(var_str)
wls1_u <- wls1_fit + qnorm(0.5 + level/2)*sqrt(var_str)
#the function form of wls1 and its prediction band
wls1_fun <- function(x)
wls1$coefficients[2]*x + wls1$coefficients[1]
wls1_fun_l <- function(x)
wls1$coefficients[2]*x + wls1$coefficients[1] -
qnorm(0.5 + level/2)*
sqrt(exp(2*t*x)*sigma^2 + exp(2*t_wls1*x)*(sigma_wls1)^2*
(1/n + (x-mean(data_fit$x))^2/((n-1)*var(data_fit$x))))
#The part under square root represents the variance of y given any x
#We could use this information to calculate how much standard deviation
#there is between y and the regression line
wls1_fun_u <- function(x)
wls1$coefficients[2]*x + wls1$coefficients[1] +
qnorm(0.5 + level/2)*
sqrt(exp(2*t*x)*sigma^2 + exp(2*t_wls1*x)*(sigma_wls1)^2*
(1/n + (x-mean(data_fit$x))^2/((n-1)*var(data_fit$x))))
#wls2 is a quadratic model
wls2 <- gls(y ~ I(x^2) + x, data = data_fit, weights = varExp(form = ~x),
method = "ML")
wls2_fit <- predict(wls2)
t_wls2 <- as.numeric(wls2$modelStruct)
sigma_wls2 <- wls2$sigma
var_wls2 <- exp(2*t_wls2*data_fit$x)*(sigma_wls2)^2 #model variance structure
#var_str is the variance of the prediction, a sum of the uncertainty in
#the regression line and in the new hypothetical replica prediction
var_str <- var_adapted + var_wls2*
(1/n + (data_fit$x-mean(data_fit$x))^2/((n-1)*var(data_fit$x)))
wls2_l <- wls2_fit - qnorm(0.5 + level/2)*sqrt(var_str)
wls2_u <- wls2_fit + qnorm(0.5 + level/2)*sqrt(var_str)
#the function form of wls2 and its prediction band
wls2_fun <- function(x)
wls2$coefficients[2]*x^2 + wls2$coefficients[3]*x +
wls2$coefficients[1]
wls2_fun_l <- function(x)
wls2$coefficients[2]*x^2 + wls2$coefficients[3]*x +
wls2$coefficients[1] -
qnorm(0.5 + level/2)*
sqrt(exp(2*t*x)*sigma^2 + exp(2*t_wls2*x)*(sigma_wls2)^2*
(1/n + (x-mean(data_fit$x))^2/((n-1)*var(data_fit$x))))
wls2_fun_u <- function(x)
wls2$coefficients[2]*x^2 + wls2$coefficients[3]*x +
wls2$coefficients[1] +
qnorm(0.5 + level/2)*
sqrt(exp(2*t*x)*sigma^2 + exp(2*t_wls2*x)*(sigma_wls2)^2*
(1/n + (x-mean(data_fit$x))^2/((n-1)*var(data_fit$x))))
#Use anova test to determine which model is better
res_anova <- anova(wls1, wls2)
pref <- numeric(n) #a vector for recording the preference
pref_score <- numeric(n)
#preference score is defined as the number of standard deviations from the regression line
sd <- numeric(n) #for storing standard deviations
if(res_anova$'p-value'[2] < 0.05){ #use polynomial model
for(i in 1:n){
sd[i] <- sqrt(exp(2*t*data_fit$x[i])*sigma^2 + exp(2*t_wls2*data_fit$x[i])*(sigma_wls2)^2*
(1/n + (data_fit$x[i]-mean(data_fit$x))^2/((n-1)*var(data_fit$x))))
if(data_fit$y[i] < wls2_fun_l(data_fit$x[i])){
pref_score[i] <- (wls2_fun(data_fit$x[i]) - data_fit$y[i])/sd[i]
} else{
if(data_fit$y[i] > wls2_fun_u(data_fit$x[i])){
pref_score[i] <- (wls2_fun(data_fit$x[i]) - data_fit$y[i])/sd[i]
}
}
}
}else{ #use linear model
for(i in 1:n){
sd[i] <- sqrt(exp(2*t*data_fit$x[i])*sigma^2 + exp(2*t_wls1*data_fit$x[i])*(sigma_wls1)^2*
(1/n + (data_fit$x[i]-mean(data_fit$x))^2/((n-1)*var(data_fit$x))))
if(data_fit$y[i] < wls1_fun_l(data_fit$x[i])){
pref_score[i] <- (wls1_fun(data_fit$x[i]) - data_fit$y[i])/sd[i]
} else{
if(data_fit$y[i] > wls1_fun_u(data_fit$x[i])){
pref_score[i] <- (wls1_fun(data_fit$x[i]) - data_fit$y[i])/sd[i]
}
}
}
}
#Plot the two weighted regression models with prediction bands
if(plot == T){
plot(data_fit, col = rgb(0,0,0,0.3), xlab = xlab, ylab = ylab,cex=.3)
lines(sort(data_fit$x), wls1_fit[order(data_fit$x)], lwd = 2, col = 2)
lines(sort(data_fit$x), wls1_l[order(data_fit$x)], lty = 2, col = 2)
lines(sort(data_fit$x), wls1_u[order(data_fit$x)], lty = 2, col = 2)
lines(sort(data_fit$x), wls2_fit[order(data_fit$x)], lwd = 2, col = 3)
lines(sort(data_fit$x), wls2_l[order(data_fit$x)], lty = 2, col = 3)
lines(sort(data_fit$x), wls2_u[order(data_fit$x)], lty = 2, col = 3)
if(res_anova$`p-value`[2] < 0.05){
curve(wls2_fun, col = 4, add = T)
curve(wls2_fun_l, col = 4, lty = 2, add = T)
curve(wls2_fun_u, col = 4, lty = 2, add = T)
} else{
curve(wls1_fun, col = 4, add = T)
curve(wls1_fun_l, col = 4, lty = 2, add = T)
curve(wls1_fun_u, col = 4, lty = 2, add = T)
}
}
return(pref_score) #returns pref as a vector
}
#Function class_predTF() detects the binding preference between two different
#transcription factors for each DNA site. The function takes in several sources
#of input including: 1) the occupancy data of the two transcription
#factors obtained from PBM experiments, 2) the predicted occupancy matrix for
#each TF for all genomic regions, 3) the variance structure of TF replicates.
#The function fits a weighted regression model to the measured gcPBM data,
#evaluates the deviation of each point from a hypothetical pair of TF replicas
#by adapting a given variance structure of TF replicas, and at last returns the
#occupancy matrix by preference score.
# First three columns of Pred_matrix_tf are genomic coordinates and ChIP-seq signal
# information, remove first before assigning preference
#<0 = preferred by TF1, 0 = no significant preference, >0 = preferred by TF2
class_predTF <- function(tf1_x, tf2_y, Pred_matrix_tf1, Pred_matrix_tf2, t, sigma, plot = F,
xlab = "tf1_x", ylab = "tf2_y", level = 0.99){
# Convert the Pred_matrix to make easy for assigning preference
Pred_genomic_coord = Pred_matrix_tf1[,1:3] # Keep info about genomic coordinates predicted
Pred_matrix_tf1 = as.matrix(Pred_matrix_tf1[,-(1:3)]) # Remove first 3 columns with information of genomic coordinates
Pred_matrix_tf2 = as.matrix(Pred_matrix_tf2[,-(1:3)])
n_pred_pos = length(Pred_matrix_tf1[1,])
Pred_matrix_combined = data.frame(x = as.vector(t(Pred_matrix_tf1),mode='numeric'), y = as.vector(t(Pred_matrix_tf2),mode='numeric')) # Combine the predictions into one data frame
n_line = nrow(Pred_matrix_combined)
data_fit <- data.frame(x = tf1_x, y = tf2_y) #occupancy data for paralogous TFs measured from gcPBM to fit
n <- nrow(data_fit)
var_adapted <- exp(2*t*data_fit$x)*sigma^2 #adapted variance structure
#wls1 is a linear model
wls1 <- gls(y ~ x, data = data_fit, weights = varExp(),
method = "ML")
wls1_fit <- predict(wls1)
t_wls1 <- as.numeric(wls1$modelStruct)
sigma_wls1 <- wls1$sigma
var_wls1 <- exp(2*t_wls1*data_fit$x)*(sigma_wls1)^2 #model variance structure
#var_str is the variance of the prediction, a sum of the uncertainty in
#the regression line and in the new hypothetical replica prediction
var_str <- var_adapted + var_wls1*
(1/n + (data_fit$x-mean(data_fit$x))^2/((n-1)*var(data_fit$x)))
wls1_l <- wls1_fit - qnorm(0.5 + level/2)*sqrt(var_str)
wls1_u <- wls1_fit + qnorm(0.5 + level/2)*sqrt(var_str)
#the function form of wls1 and its prediction band
wls1_fun <- function(x)
wls1$coefficients[2]*x + wls1$coefficients[1]
wls1_fun_l <- function(x)
wls1$coefficients[2]*x + wls1$coefficients[1] -
qnorm(0.5 + level/2)*
sqrt(exp(2*t*x)*sigma^2 + exp(2*t_wls1*x)*(sigma_wls1)^2*
(1/n + (x-mean(data_fit$x))^2/((n-1)*var(data_fit$x))))
#The part under square root represents the variance of y given any x
#We could use this information to calculate how much standard deviation
#there is between y and the regression line
wls1_fun_u <- function(x)
wls1$coefficients[2]*x + wls1$coefficients[1] +
qnorm(0.5 + level/2)*
sqrt(exp(2*t*x)*sigma^2 + exp(2*t_wls1*x)*(sigma_wls1)^2*
(1/n + (x-mean(data_fit$x))^2/((n-1)*var(data_fit$x))))
#wls2 is a quadratic model
wls2 <- gls(y ~ I(x^2) + x, data = data_fit, weights = varExp(form = ~x),
method = "ML")
wls2_fit <- predict(wls2)
t_wls2 <- as.numeric(wls2$modelStruct)
sigma_wls2 <- wls2$sigma
var_wls2 <- exp(2*t_wls2*data_fit$x)*(sigma_wls2)^2 #model variance structure
#var_str is the variance of the prediction, a sum of the uncertainty in
#the regression line and in the new hypothetical replica prediction
var_str <- var_adapted + var_wls2*
(1/n + (data_fit$x-mean(data_fit$x))^2/((n-1)*var(data_fit$x)))
wls2_l <- wls2_fit - qnorm(0.5 + level/2)*sqrt(var_str)
wls2_u <- wls2_fit + qnorm(0.5 + level/2)*sqrt(var_str)
#the function form of wls2 and its prediction band
wls2_fun <- function(x)
wls2$coefficients[2]*x^2 + wls2$coefficients[3]*x +
wls2$coefficients[1]
wls2_fun_l <- function(x)
wls2$coefficients[2]*x^2 + wls2$coefficients[3]*x +
wls2$coefficients[1] -
qnorm(0.5 + level/2)*
sqrt(exp(2*t*x)*sigma^2 + exp(2*t_wls2*x)*(sigma_wls2)^2*
(1/n + (x-mean(data_fit$x))^2/((n-1)*var(data_fit$x))))
wls2_fun_u <- function(x)
wls2$coefficients[2]*x^2 + wls2$coefficients[3]*x +
wls2$coefficients[1] +
qnorm(0.5 + level/2)*
sqrt(exp(2*t*x)*sigma^2 + exp(2*t_wls2*x)*(sigma_wls2)^2*
(1/n + (x-mean(data_fit$x))^2/((n-1)*var(data_fit$x))))
#Use anova test to determine which model is better
res_anova <- anova(wls1, wls2)
pref_score <- numeric(n_line) #a vector for recording the preference
#preference score is defined as the number of standard deviations from the regression line
sd <- numeric(n_line) #for storing standard deviations
if(res_anova$'p-value'[2] < 0.05){ #use polynomial model
for(i in 1:n_line){
if(Pred_matrix_combined[i,1] == 0){ # No preference if no prediction occurred in this position
pref_score[i] <- 0
}else{ # Assign preference to predicted values
sd[i] <- sqrt(exp(2*t*Pred_matrix_combined$x[i])*sigma^2 + exp(2*t_wls2*Pred_matrix_combined$x[i])*(sigma_wls2)^2*
(1/n + (Pred_matrix_combined$x[i]-mean(Pred_matrix_combined$x))^2/((n-1)*var(Pred_matrix_combined$x))))
if(data_fit$y[i] < wls2_fun_l(data_fit$x[i])){
pref_score[i] <- (wls2_fun(data_fit$x[i]) - data_fit$y[i])/sd[i]
} else{
if(data_fit$y[i] > wls2_fun_u(data_fit$x[i])){
pref_score[i] <- (wls2_fun(data_fit$x[i]) - data_fit$y[i])/sd[i]
}
}
}
}
}else{ #use linear model
for(i in 1:n_line){
if(Pred_matrix_combined[i,1] == 0){ # No preference if no prediction occurred in this position
pref_score[i] <- 0
}else{ # Assign preference to predicted values
sd[i] <- sqrt(exp(2*t*Pred_matrix_combined$x[i])*sigma^2 + exp(2*t_wls1*Pred_matrix_combined$x[i])*(sigma_wls1)^2*
(1/n + (Pred_matrix_combined$x[i]-mean(Pred_matrix_combined$x))^2/((n-1)*var(Pred_matrix_combined$x))))
if(data_fit$y[i] < wls1_fun_l(data_fit$x[i])){
pref_score[i] <- (wls1_fun(data_fit$x[i]) - data_fit$y[i])/sd[i]
} else{
if(data_fit$y[i] > wls1_fun_u(data_fit$x[i])){
pref_score[i] <- (wls1_fun(data_fit$x[i]) - data_fit$y[i])/sd[i]
}
}
}
}
}
# Convert the prediction vector into prediction matrix matching each position of genomic regions
Pred_matrix = matrix(pref_score,ncol=n_pred_pos,byrow = T)
Pred_matrix = round(Pred_matrix,2) # Define decimal points
Pred_matrix = data.frame(Pred_genomic_coord,Pred_matrix) # add genomic coordinate info
#Plot the two weighted regression models with prediction bands
if(plot == T){
plot(Pred_matrix_combined, col = rgb(0,0,0,0.1), xlab = xlab, ylab = ylab,cex=.3)
lines(sort(data_fit$x), wls1_fit[order(data_fit$x)], lwd = 2, col = 2)
lines(sort(data_fit$x), wls1_l[order(data_fit$x)], lty = 2, col = 2)
lines(sort(data_fit$x), wls1_u[order(data_fit$x)], lty = 2, col = 2)
lines(sort(data_fit$x), wls2_fit[order(data_fit$x)], lwd = 2, col = 3)
lines(sort(data_fit$x), wls2_l[order(data_fit$x)], lty = 2, col = 3)
lines(sort(data_fit$x), wls2_u[order(data_fit$x)], lty = 2, col = 3)
if(res_anova$`p-value`[2] < 0.05){
curve(wls2_fun, col = 4, add = T)
curve(wls2_fun_l, col = 4, lty = 2, add = T)
curve(wls2_fun_u, col = 4, lty = 2, add = T)
} else{
curve(wls1_fun, col = 4, add = T)
curve(wls1_fun_l, col = 4, lty = 2, add = T)
curve(wls1_fun_u, col = 4, lty = 2, add = T)
}
}
return(Pred_matrix) #returns pref as a data frame
}
res_pref <- classTF(data_fit[,lab.tf1_x], data_fit[,lab.tf2_y], plot = T,
xlab = lab.tf1_x, ylab = lab.tf2_y,
t = res_varRep$t, sigma = res_varRep$sigma)
data_output <- data_fit[,c(lab.tf1_x, lab.tf2_y)]
data_output$seq <- data_fit$seq
data_output$pref <- res_pref
pref_tf1 = data_output[which(data_output$pref > 0), ] ## TF1 preferred sites
pref_tf2 = data_output[which(data_output$pref < 0), ] ## TF2 preferred sites
plotvar1 = pref_tf1$pref
plotclr1 = brewer.pal(9,"Reds")
class1 = classIntervals(plotvar1,9,syle="quantile")
colcode1=findColours(class1,plotclr1)
plotvar2 = pref_tf2$pref
plotclr2 = rev(brewer.pal(9,"Blues"))
class2 = classIntervals(plotvar2,9,syle="quantile")
colcode2 = findColours(class2,plotclr2)
plot(pref_tf1[,lab.tf1_x],pref_tf1[,lab.tf2_y],cex=.3,pch=16,col=colcode1,xlim=c(0,1),ylim=c(0,1))
points(data_output[which(data_output$pref==0),lab.tf1_x],data_output[which(data_output$pref==0),lab.tf2_y],cex=.3,pch=16,col="khaki")
points(pref_tf2[,lab.tf1_x],pref_tf2[,lab.tf2_y],cex=.3,pch=16,col=colcode2)
plot(pref_tf1[,lab.tf1_x],pref_tf1[,lab.tf2_y],cex=.3,pch=16,col=colcode1,xlim=c(0,1),ylim=c(0,1))
points(data_output[which(data_output$pref==0),lab.tf1_x],data_output[which(data_output$pref==0),lab.tf2_y],cex=.3,pch=16,col="plum1")
points(pref_tf2[,lab.tf1_x],pref_tf2[,lab.tf2_y],cex=.3,pch=16,col=colcode2)
jpeg(filename = paste0(lab.tf1_x,"_vs_",lab.tf2_y,".jpg"), width = 600, height = 600)
plot(pref_tf1[,lab.tf1_x],pref_tf1[,lab.tf2_y],cex=.3,pch=16,col=colcode1,xlim=c(0,1),ylim=c(0,1))
points(data_output[which(data_output$pref==0),lab.tf1_x],data_output[which(data_output$pref==0),lab.tf2_y],cex=.3,pch=16,col="plum1")
points(pref_tf2[,lab.tf1_x],pref_tf2[,lab.tf2_y],cex=.3,pch=16,col=colcode2)
pdf(filename = paste0(lab.tf1_x,"_vs_",lab.tf2_y,".pdf"), width = 600, height = 600)
pdf(file = paste0(lab.tf1_x,"_vs_",lab.tf2_y,".pdf"), width = 600, height = 600)
plot(pref_tf1[,lab.tf1_x],pref_tf1[,lab.tf2_y],cex=.3,pch=16,col=colcode1,xlim=c(0,1),ylim=c(0,1))
points(data_output[which(data_output$pref==0),lab.tf1_x],data_output[which(data_output$pref==0),lab.tf2_y],cex=.3,pch=16,col="plum1")
points(pref_tf2[,lab.tf1_x],pref_tf2[,lab.tf2_y],cex=.3,pch=16,col=colcode2)
plot(pref_tf1[,lab.tf1_x],pref_tf1[,lab.tf2_y],cex=.3,pch=16,col=colcode1,xlim=c(0,1),ylim=c(0,1))
points(data_output[which(data_output$pref==0),lab.tf1_x],data_output[which(data_output$pref==0),lab.tf2_y],cex=.3,pch=16,col="plum2")
points(pref_tf2[,lab.tf1_x],pref_tf2[,lab.tf2_y],cex=.3,pch=16,col=colcode2)
plot(pref_tf1[,lab.tf1_x],pref_tf1[,lab.tf2_y],cex=.3,pch=16,col=colcode1,xlim=c(0,1),ylim=c(0,1))
points(data_output[which(data_output$pref==0),lab.tf1_x],data_output[which(data_output$pref==0),lab.tf2_y],cex=.3,pch=16,col="violet")
points(pref_tf2[,lab.tf1_x],pref_tf2[,lab.tf2_y],cex=.3,pch=16,col=colcode2)
plot(pref_tf1[,lab.tf1_x],pref_tf1[,lab.tf2_y],cex=.3,pch=16,col=colcode1,xlim=c(0,1),ylim=c(0,1))
points(data_output[which(data_output$pref==0),lab.tf1_x],data_output[which(data_output$pref==0),lab.tf2_y],cex=.3,pch=16,col="orchid1")
points(pref_tf2[,lab.tf1_x],pref_tf2[,lab.tf2_y],cex=.3,pch=16,col=colcode2)
plot(pref_tf1[,lab.tf1_x],pref_tf1[,lab.tf2_y],cex=.3,pch=16,col=colcode1,xlim=c(0,1),ylim=c(0,1))
points(data_output[which(data_output$pref==0),lab.tf1_x],data_output[which(data_output$pref==0),lab.tf2_y],cex=.3,pch=16,col=96)
plot(pref_tf1[,lab.tf1_x],pref_tf1[,lab.tf2_y],cex=.3,pch=16,col=colcode1,xlim=c(0,1),ylim=c(0,1))
points(data_output[which(data_output$pref==0),lab.tf1_x],data_output[which(data_output$pref==0),lab.tf2_y],cex=.3,pch=16,col="plum2")
points(pref_tf2[,lab.tf1_x],pref_tf2[,lab.tf2_y],cex=.3,pch=16,col=colcode2)
plot(pref_tf1[,lab.tf1_x],pref_tf1[,lab.tf2_y],cex=.3,pch=16,col=colcode1,xlim=c(0,1),ylim=c(0,1))
points(data_output[which(data_output$pref==0),lab.tf1_x],data_output[which(data_output$pref==0),lab.tf2_y],cex=.3,pch=16,col="plum")
points(pref_tf2[,lab.tf1_x],pref_tf2[,lab.tf2_y],cex=.3,pch=16,col=colcode2)
write.table(data_output, file = paste0("Preference_calls_",lab.tf1_x,"_vs_",lab.tf2_y,"_0.99CI.txt"), row.names = F)
write.table(data_output, file = paste0("Preference_calls_",lab.tf1_x,"_vs_",lab.tf2_y,"_0.99CI.txt"), sep="\t",quote=F, row.names = F)
data_e2f = read.table("Combined_E2f1_250nM_200nM_E2f3_250nM_E2f4_500nM_800nM_Bound_filtered_normalized.txt",col.names = c("seq","e2f1_250nM","e2f1_200nM","e2f3_250nM","e2f4_500nM","e2f4_800nM"))
data_fit = data_e2f
lab.tf1_x = "e2f1_250nM"  ## Used in Replicate estimate (VarRep) and TF pair estimate (ClassTF)
lab.tf1_y = "e2f1_200nM"  ## Used in Replicate estimate
lab.tf2_y = "e2f4_500nM"  ## Used in TF pair estimate
res_varRep <- varRep(data_fit[,lab.tf1_x], data_fit[,lab.tf1_y], plot = T,
xlab = lab.tf1_x, ylab = lab.tf1_y)
res_pref <- classTF(data_fit[,lab.tf1_x], data_fit[,lab.tf2_y], plot = T,
xlab = lab.tf1_x, ylab = lab.tf2_y,
t = res_varRep$t, sigma = res_varRep$sigma)
data_output <- data_fit[,c(lab.tf1_x, lab.tf2_y)]
data_output$seq <- data_fit$seq
data_output$pref <- res_pref
write.table(data_output, file = paste0("Preference_calls_",lab.tf1_x,"_vs_",lab.tf2_y,"_0.99CI.txt"), sep="\t",quote=F, row.names = F)
data_bHLH = read.table("Combined_Max_Myc_Mad_MadL_Bound_filtered_normalized.txt",col.names = c("seq","max","myc","mad","madL"))
data_fit = data_bHLH
lab.tf1_x = "mad"
lab.tf1_y = "madL"
lab.tf2_y = "myc"
res_varRep <- varRep(data_fit[,lab.tf1_x], data_fit[,lab.tf1_y], plot = T,
xlab = lab.tf1_x, ylab = lab.tf1_y)
res_pref <- classTF(data_fit[,lab.tf1_x], data_fit[,lab.tf2_y], plot = T,
xlab = lab.tf1_x, ylab = lab.tf2_y,
t = res_varRep$t, sigma = res_varRep$sigma)
data_output <- data_fit[,c(lab.tf1_x, lab.tf2_y)]
data_output$seq <- data_fit$seq
data_output$pref <- res_pref
write.table(data_output, file = paste0("Preference_calls_",lab.tf1_x,"_vs_",lab.tf2_y,"_0.99CI.txt"), sep="\t",quote=F, row.names = F)
data_runx = read.table("Combined_Runx1_10nM_50nM_Runx2_10nM_Bound_filtered_normalized.txt",col.names = c("seq","runx1_10nM","runx1_50nM","runx2_10nM"))
data_fit = data_runx
lab.tf1_x = "runx1_10nM"
lab.tf1_y = "runx1_50nM"
lab.tf2_x = "runx2_10nM"
res_varRep <- varRep(data_fit[,lab.tf1_x], data_fit[,lab.tf1_y], plot = T,
xlab = lab.tf1_x, ylab = lab.tf1_y)
res_pref <- classTF(data_fit[,lab.tf1_x], data_fit[,lab.tf2_y], plot = T,
xlab = lab.tf1_x, ylab = lab.tf2_y,
t = res_varRep$t, sigma = res_varRep$sigma)
lab.tf2_y = "runx2_10nM"
res_pref <- classTF(data_fit[,lab.tf1_x], data_fit[,lab.tf2_y], plot = T,
xlab = lab.tf1_x, ylab = lab.tf2_y,
t = res_varRep$t, sigma = res_varRep$sigma)
data_output <- data_fit[,c(lab.tf1_x, lab.tf2_y)]
data_output$seq <- data_fit$seq
data_output$pref <- res_pref
write.table(data_output, file = paste0("Preference_calls_",lab.tf1_x,"_vs_",lab.tf2_y,"_0.99CI.txt"), sep="\t",quote=F, row.names = F)
